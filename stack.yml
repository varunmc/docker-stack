AWSTemplateFormatVersion: 2010-09-09
Description: The application stack

####################
Parameters:
  GitHubToken:
    Description: The GitHub OAuth token
    Type: String

  SecurityGroup:
    Type: AWS::EC2::SecurityGroup::Id
    Description: The security group for the cluster hosts

  Subnets:
    Type: List<AWS::EC2::Subnet::Id>
    Description: The subnets for the cluster

####################
Resources:
  AutoScalingGroup:
    Type: AWS::AutoScaling::AutoScalingGroup
    Properties:
      LaunchConfigurationName: !Ref LaunchConfiguration
      MinSize: 3
      MaxSize: 3
      VPCZoneIdentifier: !Ref Subnets
    CreationPolicy:
      ResourceSignal:
        Timeout: PT15M
    UpdatePolicy:
      AutoScalingRollingUpdate:
        MinInstancesInService: 1
        MaxBatchSize: 1
        PauseTime: PT15M
        SuspendProcesses:
          - HealthCheck
          - ReplaceUnhealthy
          - AZRebalance
          - AlarmNotification
          - ScheduledActions
        WaitOnResourceSignals: true

  Cluster:
    Type: AWS::ECS::Cluster
    Properties:
      ClusterName: StagingCluster

#  CodeBuild:
#    Type: AWS::CodeBuild::Project
#    Properties:
#      Artifacts:
#        Type: NO_ARTIFACTS
#      Environment:
#        ComputeType: BUILD_GENERAL1_SMALL
#        Image: aws/codebuild/docker:1.12.1
#        Type: LINUX_CONTAINER
#      Name: Stack
#      ServiceRole: !GetAtt [CodeBuildRole, Arn]
#      Source:
#        Auth:
#          Resource: !Ref GitHubToken
#          Type: OAUTH
#        Location: https://github.com/varunmc/docker-stack.git
#        Type: GITHUB

#  CodeBuildRole:
#    Type: AWS::IAM::Role
#    Properties:
#      AssumeRolePolicyDocument:
#        Version: 2012-10-17
#        Statement:
#        - Action:
#          - sts:AssumeRole
#          Effect: Allow
#          Principal:
#            Service:
#            - codebuild.amazonaws.com
#      ManagedPolicyArns:
#      - arn:aws:iam::aws:policy/PowerUserAccess

#  CodePipeline:
#    Type: AWS::CodePipeline::Pipeline
#    Properties:
#      ArtifactStore:
#        Location: !Ref Store
#        Type: S3
#      Name: Stack
#      RoleArn: !GetAtt [CodePipelineRole, Arn]
#      Stages:
#      - Name: Source
#        Actions:
#        - Name: Checkout
#          ActionTypeId:
#            Category: Source
#            Owner: ThirdParty
#            Provider: GitHub
#            Version: 1
#          Configuration:
#            Branch: master
#            OAuthToken: !Ref GitHubToken
#            Owner: varunmc
#            Repo: docker-stack
#          OutputArtifacts:
#          - Name: Sources
#      - Name: Build
#        Actions:
#        - Name: Build
#          ActionTypeId:
#            Category: Build
#            Owner: AWS
#            Provider: CodeBuild
#            Version: 1
#          Configuration:
#            ProjectName: !Ref CodeBuild
#          InputArtifacts:
#          - Name: Sources

#  CodePipelineRole:
#    Type: AWS::IAM::Role
#    Properties:
#      AssumeRolePolicyDocument:
#        Version: 2012-10-17
#        Statement:
#        - Action:
#          - sts:AssumeRole
#          Effect: Allow
#          Principal:
#            Service:
#            - codepipeline.amazonaws.com
#      ManagedPolicyArns:
#      - arn:aws:iam::aws:policy/AdministratorAccess

  InstanceRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Action:
          - sts:AssumeRole
          Effect: Allow
          Principal:
            Service:
            - ec2.amazonaws.com
      ManagedPolicyArns:
      - arn:aws:iam::aws:policy/PowerUserAccess

  InstanceProfile:
    Type: AWS::IAM::InstanceProfile
    Properties:
      Path: /
      Roles:
        - !Ref InstanceRole

  LaunchConfiguration:
    Type: AWS::AutoScaling::LaunchConfiguration
    Properties:
      IamInstanceProfile: !Ref InstanceProfile
      ImageId: ami-9eb4b1e5
      InstanceType: m4.large
      SecurityGroups:
      - !Ref SecurityGroup
      UserData:
        Fn::Base64: !Sub |
          #!/bin/bash
          yum install -y aws-cfn-bootstrap
          /opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration
          /opt/aws/bin/cfn-signal -e $? --region ${AWS::Region} --stack ${AWS::StackName} --resource AutoScalingGroup
    Metadata:
      AWS::CloudFormation::Init:
        config:
          commands:
            01_add_instance_to_cluster:
                command: !Sub echo ECS_CLUSTER=${Cluster} >> /etc/ecs/ecs.config
          files:
            "/etc/cfn/cfn-hup.conf":
              mode: 000400
              owner: root
              group: root
              content: !Sub |
                [main]
                stack=${AWS::StackId}
                region=${AWS::Region}
            "/etc/cfn/hooks.d/cfn-auto-reloader.conf":
              content: !Sub |
                [cfn-auto-reloader-hook]
                triggers=post.update
                path=Resources.LaunchConfiguration.Metadata.AWS::CloudFormation::Init
                action=/opt/aws/bin/cfn-init -v --region ${AWS::Region} --stack ${AWS::StackName} --resource LaunchConfiguration
          services:
            sysvinit:
              cfn-hup:
                enabled: true
                ensureRunning: true
                files:
                - /etc/cfn/cfn-hup.conf
                - /etc/cfn/hooks.d/cfn-auto-reloader.conf

  Store:
    Type: AWS::S3::Bucket
